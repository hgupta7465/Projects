setwd("C:/Users/hp/Desktop/Bank Marketing Data Classification")
setwd("C:/Users/hp/Desktop/Bank Marketing Data Classification")
#Importing the dataset
dataset <- read.csv("bank-additional-full.csv")
View(dataset)
#Importing the dataset
dataset <- read.csv("bank-additional-full.csv", sep = ";")
View(dataset)
#Importing the dataset
dataset <- read.csv("bank-additional-full.csv", sep = ";", stringsAsFactors = FALSE)
#Checking if there are any NULL values in the dataset
is.null(dataset)
#Now, we will simply visualize some of the columns in the dataset in
#order to get a general information about the dataset.
#
#We will install the ggplot2 package for visualization.
install.packages("ggplot2")
#Activating the ggplot2() package.
library(ggplot2)
ggplot() +
geom_bar(aes(x = dataset$age))
#Visualizing the age column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$age)) +
xlab("Age") +
ylab("Count") +
ggtitle("Age Distribution Graph")
#Visualizing the job column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$job)) +
xlab("Job") +
ylab("Count") +
ggtitle("Job Distribution Graph")
#Visualizing the marital status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$marital)) +
xlab("Marital Status") +
ylab("Count") +
ggtitle("Marital Status Distribution Graph")
#Visualizing the education column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$education)) +
xlab("Education") +
ylab("Count") +
ggtitle("Education Distribution Graph")
#Visualizing the default column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$default)) +
xlab("Default Status") +
ylab("Count") +
ggtitle("Default Status Distribution Graph")
#Visualizing the housing loan status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$housing)) +
xlab("Housing Loan Status") +
ylab("Count") +
ggtitle("Housing Loan Status Distribution Graph")
#Visualizing the personal loan status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$loan)) +
xlab("Personal Loan Status") +
ylab("Count") +
ggtitle("Personal Loan Status Distribution Graph")
#Visualizing the contact column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$contact)) +
xlab("Contact Medium") +
ylab("Count") +
ggtitle("Contact Medium Distribution Graph")
#Visualizing the month column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$month)) +
xlab("Contact Month") +
ylab("Count") +
ggtitle("Contact Month Distribution Graph")
#Visualizing the day_of_week column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$day_of_week)) +
xlab("Day of Week") +
ylab("Count") +
ggtitle("Day of Week Distribution Graph")
#Visualizing the duration column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$duration)) +
xlab("Call Duration") +
ylab("Count") +
ggtitle("Call Duration Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$campaign)) +
xlab("Campaign") +
ylab("Count") +
ggtitle("Campaign Distribution Graph")
#Visualizing the pdays column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$pdays)) +
xlab("Pdays") +
ylab("Count") +
ggtitle("Pdays Distribution Graph")
View(dataset)
#Visualizing the pdays column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$pdays)) +
xlab("Pdays") +
ylab("Count") +
ggtitle("Pdays Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$campaign)) +
xlab("Campaign") +
ylab("Count") +
ggtitle("Campaign Distribution Graph")
#Visualizing the pdays column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$previous)) +
xlab("Pdays") +
ylab("Count") +
ggtitle("Pdays Distribution Graph")
#Visualizing the pdays column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$previous)) +
xlab("Contacts performed before this campaign") +
ylab("Count") +
ggtitle("Pervious Contacts performed Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$emp.var.rate)) +
xlab("Employment Variation Rate") +
ylab("Count") +
ggtitle("Employment Variation Rate Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$cons.price.idx)) +
xlab("Consumer Price Index") +
ylab("Count") +
ggtitle("Consumer Price Index Distribution Graph")
ggplot() +
geom_bar(aes(x = dataset$cons.conf.idx)) +
xlab("Consumer Confidence Index") +
ylab("Count") +
ggtitle("Consumer Confidence Index Distribution Graph")
ggplot() +
geom_bar(aes(x = dataset$euribor3m)) +
xlab("euribor 3 month rate") +
ylab("Count") +
ggtitle("euribor 3 month rate Distribution Graph")
# Encoding categorical data
dataset$job = factor(dataset$job,
levels = c( 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
# Encoding categorical data for marital column in the dataset.
dataset$job = factor(dataset$job,
levels = c( 'divorced','married','single','unknown'),
labels = c(1, 2, 3, 4))
# Encoding categorical data for job column in the dataset.
dataset$job = factor(dataset$job,
levels = c( 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
# Encoding categorical data for marital column in the dataset.
dataset$marital = factor(dataset$marital,
levels = c( 'divorced','married','single','unknown'),
labels = c(1, 2, 3, 4))
#Importing the dataset.
dataset <- read.csv("bank-additional-full.csv", sep = ";", stringsAsFactors = FALSE)
# Encoding categorical data for job column in the dataset.
dataset$job = factor(dataset$job,
levels = c( 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
# Encoding categorical data for marital column in the dataset.
dataset$marital = factor(dataset$marital,
levels = c( 'divorced','married','single','unknown'),
labels = c(1, 2, 3, 4))
# Encoding categorical data for education column in the dataset.
dataset$education = factor(dataset$education,
levels = c('basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8))
# Encoding categorical data for default column in the dataset.
dataset$default = factor(dataset$default,
levels = c('no','yes','unknown'),
labels = c(1, 2, 3))
# Encoding categorical data for housing column in the dataset.
dataset$housing = factor(dataset$housing,
levels = c('no','yes','unknown'),
labels = c(1, 2, 3))
# Encoding categorical data for loan column in the dataset.
dataset$loan = factor(dataset$loan,
levels = c('no','yes','unknown'),
labels = c(1, 2, 3))
#Encoding categorical data for loan column in the dataset.
dataset$contact = factor(dataset$contact,
levels = c('cellular','telephone'),
labels = c(1, 2))
#Visualizing the month column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$month)) +
xlab("Contact Month") +
ylab("Count") +
ggtitle("Contact Month Distribution Graph")
#Encoding categorical data for month column in the dataset.
dataset$month = factor(dataset$month,
levels = c('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
#Visualizing the day_of_week column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$day_of_week)) +
xlab("Day of Week") +
ylab("Count") +
ggtitle("Day of Week Distribution Graph")
#Encoding categorical data for day_of_weeek column in the dataset.
dataset$day_of_week = factor(dataset$day_of_week,
levels = c('mon', 'tue', 'wed', 'thu', 'fri'),
labels = c(1, 2, 3, 4, 5))
#Encoding categorical data for poutcome column in the dataset.
dataset$poutcome = factor(dataset$poutcome,
levels = c( 'failure','nonexistent','success'),
labels = c(1, 2, 3))
#Encoding categorical data for y column in the dataset.
dataset$y = factor(dataset$y,
levels = c('no', 'yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(randomForest)
library("ggplot2", lib.loc="~/R/win-library/3.5")
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
classifier = randomForest(x = training_set[, -21],
y = training_set$y,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[, -21])
# Making the Confusion Matrix
cm = table(test_set[, 21], y_pred)
cm
classifier = randomForest(x = training_set[, -21],
y = training_set$y,
ntree = 1000)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[, -21])
# Making the Confusion Matrix
cm = table(test_set[, 21], y_pred)
cm
classifier = randomForest(x = training_set[, -21],
y = training_set$y,
ntree = 500)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 11]) - 1, max(set[, 11]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'Call Duration')
y_grid = predict(classifier, grid_set)
plot(set[, -21],
main = 'Random Forest Classification (Training set)',
xlab = 'Age', ylab = 'Call Duration',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 21] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 11]) - 1, max(set[, 11]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
#Applying the SVM Classification
#Support Vector Machines is chosen for the trial stage of selecting a
#Predictive Algorithm for Machine Learning for high accuracy,
#resistance to overfitting, and the high dimensionality of the dataset.
# Fitting SVM to the Training set
install.packages('e1071')
library(e1071)
classifier = svm(formula = y ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[, -21])
# Making the Confusion Matrix
cm = table(test_set[, 21], y_pred)
cm
summary(classifier)
#Visualizing the age column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$age)) +
xlab("Age") +
ylab("Count") +
ggtitle("Age Distribution Graph")
#Visualizing the job column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$job)) +
xlab("Job") +
ylab("Count") +
ggtitle("Job Distribution Graph")
#Visualizing the marital status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$marital)) +
xlab("Marital Status") +
ylab("Count") +
ggtitle("Marital Status Distribution Graph")
#Visualizing the education column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$education)) +
xlab("Education") +
ylab("Count") +
ggtitle("Education Distribution Graph")
#Visualizing the default status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$default)) +
xlab("Default Status") +
ylab("Count") +
ggtitle("Default Status Distribution Graph")
#Visualizing the housing loan status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$housing)) +
xlab("Housing Loan Status") +
ylab("Count") +
ggtitle("Housing Loan Status Distribution Graph")
#Visualizing the personal loan status column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$loan)) +
xlab("Personal Loan Status") +
ylab("Count") +
ggtitle("Personal Loan Status Distribution Graph")
#Visualizing the contact column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$contact)) +
xlab("Contact Medium") +
ylab("Count") +
ggtitle("Contact Medium Distribution Graph")
#Visualizing the month column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$month)) +
xlab("Contact Month") +
ylab("Count") +
ggtitle("Contact Month Distribution Graph")
#Visualizing the day_of_week column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$day_of_week)) +
xlab("Day of Week") +
ylab("Count") +
ggtitle("Day of Week Distribution Graph")
#Visualizing the duration column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$duration)) +
xlab("Call Duration") +
ylab("Count") +
ggtitle("Call Duration Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$campaign)) +
xlab("Campaign") +
ylab("Count") +
ggtitle("Campaign Distribution Graph")
#Visualizing the pdays column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$previous)) +
xlab("Contacts performed before this campaign") +
ylab("Count") +
ggtitle("Pervious Contacts performed Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$emp.var.rate)) +
xlab("Employment Variation Rate") +
ylab("Count") +
ggtitle("Employment Variation Rate Distribution Graph")
#Visualizing the campaign column of the dataset.
ggplot() +
geom_bar(aes(x = dataset$cons.price.idx)) +
xlab("Consumer Price Index") +
ylab("Count") +
ggtitle("Consumer Price Index Distribution Graph")
ggplot() +
geom_bar(aes(x = dataset$cons.conf.idx)) +
xlab("Consumer Confidence Index") +
ylab("Count") +
ggtitle("Consumer Confidence Index Distribution Graph")
ggplot() +
geom_bar(aes(x = dataset$euribor3m)) +
xlab("euribor 3 month rate") +
ylab("Count") +
ggtitle("euribor 3 month rate Distribution Graph")
