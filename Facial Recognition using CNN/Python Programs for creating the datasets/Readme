A unique data capture pipeline that has been painstakingly designed to guarantee the methodical gathering and arrangement of face photos aids in the construction of the dataset. Two different Python scripts are included in this pipeline, and they are both essential to the data preparation and collection processes.

The first application integrates a webcam to capture facial images in real-time, and it is implemented using OpenCV and additional libraries. The first thing this program does is ask the user for two basic pieces of information: their name and how many pictures they would want to take. After this input, it creates a directory with the user's name on it dynamically, creating a special location to store the photos that were taken. The webcam interface is then turned on, and the software goes into a loop to take the predetermined amount of pictures. The webcam records a picture at each iteration, which is subsequently processed by OpenCV's Haar cascade classifier for facial recognition ~\cite{TestReference9}. The collected image is transformed to grayscale when a face is successfully identified in order to standardize the data format and make further processing easier. The grayscale picture is downsized to 100 Ã— 100 pixels, which is a preset resolution to provide uniformity throughout the collection and reduce possible computing difficulties. At the end, the processed image is stored in the user-specific directory, which adds to the dataset every time the capture loop is repeated.

As the last step in creating a dataset, the second program's job is to transform the facial photos that are collected into an organized format that can be used for machine learning projects. Every directory in the dataset is iterated over by this software, and each directory corresponds to a different person. It loads the photographed faces one after the other in each directory, transforming them to grayscale so that their representation is consistent. The grayscale images are then converted into one-dimensional arrays of pixel values, which makes it easier to include them into the pipeline for machine learning. Simultaneously, the application labels every picture with the appropriate class label, indicating the person's identification to whom the picture belongs. After combining the pixel values and class labels, a structured DataFrame is produced, with each row containing the pixel values of a face image and its corresponding class label. After that, the DataFrame is serialized into a CSV file, preserving the dataset in a format that can be used with machine learning techniques.

